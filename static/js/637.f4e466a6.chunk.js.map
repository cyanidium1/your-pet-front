{"version":3,"file":"static/js/637.f4e466a6.chunk.js","mappings":"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","sources":["webpack://your-pet-front/./src/components/AuthForm/AuthForm.module.css?9658","components/AuthForm/AuthForm.jsx","pages/LoginPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form_heading\":\"AuthForm_form_heading__RVRf1\",\"auth_section\":\"AuthForm_auth_section__TF+-M\",\"svg_sizing\":\"AuthForm_svg_sizing__UthJ9\",\"eye_button_positioning\":\"AuthForm_eye_button_positioning__6+3Ey\",\"form_group\":\"AuthForm_form_group__26z7T\",\"crosstick_icon\":\"AuthForm_crosstick_icon__SYMGM\",\"auth_page\":\"AuthForm_auth_page__3TMmS\",\"auth_input\":\"AuthForm_auth_input__hoBSu\",\"red_outline\":\"AuthForm_red_outline__ggYwm\",\"green_outline\":\"AuthForm_green_outline__+mDvc\",\"auth_inputs\":\"AuthForm_auth_inputs__abeEv\",\"navtext\":\"AuthForm_navtext__aFNSs\",\"auth_form\":\"AuthForm_auth_form__VAg3V\",\"auth_submit_button\":\"AuthForm_auth_submit_button__E93ut\",\"end_auth_form\":\"AuthForm_end_auth_form__uu2mZ\",\"end_auth_form_login\":\"AuthForm_end_auth_form_login__rXPrk\",\"message\":\"AuthForm_message__Le5UP\",\"positive\":\"AuthForm_positive__DUuVt\",\"negative\":\"AuthForm_negative__oBBmx\"};","import React, { useEffect, useState } from 'react';\nimport {\n  Link,\n  NavLink,\n  useLocation,\n  useNavigate,\n  useSearchParams,\n} from 'react-router-dom';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\n\nimport { FcGoogle } from 'react-icons/fc';\n\nimport icons from '../../images/icons.svg';\nimport css from './AuthForm.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  login,\n  loginWithGoogle,\n  refreshUser,\n  register,\n} from 'redux/auth/authOperations';\nimport { openModalCongrats } from 'redux/global/globalSlice';\nimport { selectUser } from 'redux/auth/authSelectors';\nimport { addToken } from 'redux/auth/authSlice';\n\nconst AuthForm = () => {\n  const location = useLocation();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const [searchParams, setSearchParams] = useSearchParams();\n  const user = useSelector(selectUser);\n  const [isLoginPageOpen, setIsLoginPageOpen] = useState(false);\n  const [isPasswordShown, setIsPasswordShown] = useState(false);\n  const [isConfirmPasswordShown, setIsConfirmPasswordShown] = useState(false);\n\n  useEffect(() => {\n    const isLoginPage = location.pathname === '/login';\n    setIsLoginPageOpen(isLoginPage);\n  }, [location]);\n\n  const getValidationSchema = () => {\n    if (isLoginPageOpen) {\n      return Yup.object().shape({\n        email: Yup.string()\n          .email('Invalid email address')\n          .required('Email is required'),\n        password: Yup.string()\n          .min(6, 'Password must be at least 6 characters')\n          .max(16, 'Password must be at most 16 characters')\n          .matches(\n            /^(?=.*[a-z])(?=.*[A-Z]).{6,16}$/,\n            'Password must contain at least one uppercase letter, one lowercase letter, and one digit'\n          )\n          .required('Password is required'),\n      });\n    } else {\n      return Yup.object().shape({\n        name: Yup.string()\n          .min(2, 'Name must be at least 2 characters')\n          .max(16, 'Name must be at most 16 characters')\n          .required('Name is required'),\n        email: Yup.string()\n          .email('Invalid email address')\n          .required('Email is required'),\n        password: Yup.string()\n          .min(6, 'Password must be at least 6 characters')\n          .max(16, 'Password must be at most 16 characters')\n          .matches(\n            /^(?=.*[a-z])(?=.*[A-Z]).{6,16}$/,\n            'Password must contain at least one uppercase letter, one lowercase letter, and one digit'\n          )\n          .required('Password is required'),\n        confirm_password: Yup.string()\n          .oneOf([Yup.ref('password'), null], 'Passwords must match')\n          .required('Confirm Password is required'),\n      });\n    }\n  };\n\n  const handleLogin = async values => {\n    await dispatch(login({ email: values.email, password: values.password }));\n    await dispatch(refreshUser()).then(() => navigate('/profile'));\n  };\n\n  const handleRegister = values => {\n    dispatch(\n      register({\n        email: values.email,\n        password: values.password,\n        name: values.name,\n      })\n    );\n    dispatch(openModalCongrats());\n    dispatch(refreshUser());\n  };\n  const productName = searchParams.get('token') || null;\n  useEffect(() => {\n    const handleAddToken = async () => {\n      if (productName) {\n        await dispatch(addToken({ token: productName }));\n        await dispatch(refreshUser());\n      }\n    };\n\n    handleAddToken();\n  }, [productName, dispatch, setSearchParams]);\n\n  useEffect(() => {\n    if (user) {\n      navigate('/profile');\n    }\n  }, [user, navigate]);\n\n  return (\n    <section className={`${css.auth_page}`}>\n      <div className={css.auth_section}>\n        <h1 className={css.form_heading}>\n          {isLoginPageOpen ? 'Login' : 'Registration'}\n        </h1>\n        <Formik\n          initialValues={{\n            email: '',\n            name: '',\n            password: '',\n            confirm_password: '',\n          }}\n          validationSchema={getValidationSchema()}\n          onSubmit={values => {\n            console.log('Form values:', values);\n            isLoginPageOpen ? handleLogin(values) : handleRegister(values);\n          }}\n        >\n          {formik => (\n            <Form className={css.auth_form}>\n              {!isLoginPageOpen && (\n                <div className={css.form_group}>\n                  <Field\n                    type=\"text\"\n                    name=\"name\"\n                    placeholder=\"Name\"\n                    className={`${css.auth_input} ${\n                      formik.touched.name && formik.errors.name\n                        ? css.red_outline\n                        : formik.values.name && !formik.errors.name\n                        ? css.green_outline\n                        : null\n                    }`}\n                  />\n                  <div className={css.eye_button_positioning}>\n                    <span>\n                      <svg className={css.svg_sizing} width=\"24\" height=\"24\">\n                        <use\n                          xlinkHref={\n                            formik.errors.name && formik.values.name\n                              ? icons + '#icon-crossauth'\n                              : formik.values.name\n                              ? icons + '#icon-tickauth'\n                              : ''\n                          }\n                        />\n                      </svg>\n                    </span>\n                  </div>\n                  <div className={css.message}>\n                    {!formik.errors.name && formik.values.name && (\n                      <div className={css.positive}>Name is valid</div>\n                    )}\n                    <ErrorMessage\n                      name=\"name\"\n                      component=\"div\"\n                      className={css.negative}\n                    />\n                  </div>\n                </div>\n              )}\n              <div className={css.form_group}>\n                <Field\n                  type=\"email\"\n                  name=\"email\"\n                  autoComplete=\"email\"\n                  placeholder=\"Email\"\n                  className={`${css.auth_input} ${\n                    formik.touched.email && formik.errors.email\n                      ? css.red_outline\n                      : formik.values.email && !formik.errors.email\n                      ? css.green_outline\n                      : null\n                  }`}\n                />\n                <div className={css.eye_button_positioning}>\n                  <span>\n                    <svg className={css.svg_sizing} width=\"24\" height=\"24\">\n                      <use\n                        xlinkHref={\n                          formik.errors.email && formik.values.email\n                            ? icons + '#icon-crossauth'\n                            : formik.values.email\n                            ? icons + '#icon-tickauth'\n                            : ''\n                        }\n                      />\n                    </svg>\n                  </span>\n                </div>\n                <div className={css.message}>\n                  {!formik.errors.email && formik.values.email && (\n                    <div className={css.positive}>Email is valid</div>\n                  )}\n                  <ErrorMessage\n                    name=\"email\"\n                    component=\"div\"\n                    className={css.negative}\n                  />\n                </div>\n              </div>\n              <div className={css.form_group}>\n                <Field\n                  type={isPasswordShown ? 'text' : 'password'}\n                  name=\"password\"\n                  placeholder=\"Password\"\n                  autoComplete={!isLoginPageOpen ? 'new-password' : 'off'}\n                  className={`${css.auth_input} ${\n                    formik.touched.password && formik.errors.password\n                      ? css.red_outline\n                      : formik.values.password && !formik.errors.password\n                      ? css.green_outline\n                      : null\n                  }`}\n                />\n                <div className={css.eye_button_positioning}>\n                  <span>\n                    <svg className={css.svg_sizing} width=\"24\" height=\"24\">\n                      <use\n                        xlinkHref={\n                          formik.errors.password && formik.values.password\n                            ? icons + '#icon-crossauth'\n                            : formik.values.password\n                            ? icons + '#icon-tickauth'\n                            : ''\n                        }\n                      />\n                    </svg>\n                  </span>\n                  <button\n                    type=\"button\"\n                    onClick={() => setIsPasswordShown(!isPasswordShown)}\n                  >\n                    <svg className={css.svg_sizing}>\n                      <use\n                        xlinkHref={\n                          isPasswordShown\n                            ? icons + '#icon-eye-open'\n                            : icons + '#icon-eye-closed'\n                        }\n                      ></use>\n                    </svg>\n                  </button>\n                </div>\n                <div className={css.message}>\n                  {!formik.errors.password && formik.values.password && (\n                    <div className={css.positive}>Password is secure</div>\n                  )}\n                  <ErrorMessage\n                    name=\"password\"\n                    component=\"div\"\n                    className={css.negative}\n                  />\n                </div>\n              </div>\n              {!isLoginPageOpen && (\n                <div className={css.form_group}>\n                  <Field\n                    type={isConfirmPasswordShown ? 'text' : 'password'}\n                    name=\"confirm_password\"\n                    placeholder=\"Confirm password\"\n                    autoComplete=\"new-password\"\n                    className={`${css.auth_input} ${\n                      formik.touched.confirm_password &&\n                      formik.errors.confirm_password\n                        ? css.red_outline\n                        : formik.values.confirm_password &&\n                          !formik.errors.confirm_password\n                        ? css.green_outline\n                        : null\n                    }`}\n                  />\n\n                  <div className={css.eye_button_positioning}>\n                    <span>\n                      <svg className={css.svg_sizing} width=\"24\" height=\"24\">\n                        <use\n                          xlinkHref={\n                            formik.errors.confirm_password &&\n                            formik.values.confirm_password\n                              ? icons + '#icon-crossauth'\n                              : formik.values.confirm_password\n                              ? icons + '#icon-tickauth'\n                              : ''\n                          }\n                        />\n                      </svg>\n                    </span>\n                    <button\n                      type=\"button\"\n                      onClick={() =>\n                        setIsConfirmPasswordShown(!isConfirmPasswordShown)\n                      }\n                    >\n                      <svg className={css.svg_sizing}>\n                        <use\n                          xlinkHref={\n                            isConfirmPasswordShown\n                              ? icons + '#icon-eye-open'\n                              : icons + '#icon-eye-closed'\n                          }\n                        ></use>\n                      </svg>\n                    </button>\n                  </div>\n                  <div className={css.message}>\n                    {!formik.errors.confirm_password &&\n                      formik.values.confirm_password && (\n                        <div className={css.positive}>\n                          Passwords are matching\n                        </div>\n                      )}\n                    <ErrorMessage\n                      name=\"confirm_password\"\n                      component=\"div\"\n                      className={css.negative}\n                    />\n                  </div>\n                </div>\n              )}\n              <div\n                className={\n                  isLoginPageOpen\n                    ? `${css.end_auth_form} ${css.end_auth_form_login}`\n                    : `${css.end_auth_form}`\n                }\n              >\n                <button className={css.auth_submit_button} type=\"submit\">\n                  {isLoginPageOpen ? 'Login' : 'Register'}\n                </button>\n\n                <span>OR</span>\n                {/* <button\n                  className={css.auth_submit_button}\n                  onClick={() => {\n                    dispatch(loginWithGoogle());\n                  }}\n                  type=\"button\"\n                >\n                  Login with Google\n                </button> */}\n\n                <a\n                  className={css.auth_submit_button}\n                  href=\"https://your-pet-backend-nci6.onrender.com/api/users/google\"\n                >\n                  <FcGoogle />\n                  {!isLoginPageOpen ? 'Register ' : 'Login '}\n                  with Google\n                </a>\n\n                {!isLoginPageOpen ? (\n                  <p className={css.navtext}>\n                    Already have an account <NavLink to=\"/login\">Login</NavLink>\n                  </p>\n                ) : (\n                  <p className={css.navtext}>\n                    Don't have an account?{' '}\n                    <NavLink to=\"/register\">Register</NavLink>\n                  </p>\n                )}\n              </div>\n            </Form>\n          )}\n        </Formik>\n      </div>\n    </section>\n  );\n};\n\nexport default AuthForm;\n","import React from \"react\";\nimport AuthForm from \"../components/AuthForm/AuthForm\";\n\nconst LoginPage = () => {\n  return <AuthForm />;\n};\n\nexport default LoginPage;\n"],"names":["location","useLocation","dispatch","useDispatch","navigate","useNavigate","_useSearchParams","useSearchParams","_useSearchParams2","_slicedToArray","searchParams","setSearchParams","user","useSelector","selectUser","_useState","useState","_useState2","isLoginPageOpen","setIsLoginPageOpen","_useState3","_useState4","isPasswordShown","setIsPasswordShown","_useState5","_useState6","isConfirmPasswordShown","setIsConfirmPasswordShown","useEffect","isLoginPage","pathname","handleLogin","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","values","wrap","_context","prev","next","login","email","password","refreshUser","then","stop","_x","apply","arguments","productName","get","handleAddToken","_ref2","_callee2","_context2","addToken","token","_jsx","className","concat","css","children","_jsxs","Formik","initialValues","name","confirm_password","validationSchema","Yup","shape","required","min","max","matches","oneOf","onSubmit","console","log","register","openModalCongrats","handleRegister","formik","Form","Field","type","placeholder","touched","errors","width","height","xlinkHref","icons","ErrorMessage","component","autoComplete","onClick","href","FcGoogle","NavLink","to","AuthForm"],"sourceRoot":""}